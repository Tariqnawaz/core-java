Read Mee - Bridge Pattern

Advantage of Bridge Pattern

It enables the separation of implementation from the interface.
It improves the extensibility.
It allows the hiding of implementation details from the client.

Usage of Bridge Pattern
When you don't want a permanent binding between the functional abstraction and its implementation.
When both the functional abstraction and its implementation need to extended using sub-classes.
It is mostly used in those places where changes are made in the implementation does not affect the clients.

2. example(shape)
Now we will use bridge design pattern to decouple the interfaces from implementation and the UML diagram for the classes and inter-
faces after applying bridge pattern will look like below image.

Notice the bridge between Shape and Color interfaces and use of composition in implementing the bridge pattern.

3. example (vehicle)

4. example (shape - circle)
We are demonstrating use of Bridge pattern via following example in which a circle can be drawn in different colors using same abst-
ract class method but different bridge implementer classes.

We have a DrawAPI interface which is acting as a bridge implementer and concrete classes RedCircle, GreenCircle implementing the Draw-
API interface. Shape is an abstract class and will use object of DrawAPI. BridgePatternDemo, our demo class will use Shape class to d-
raw different colored circle.


5. exampe (tv)
The example of TV and Remote Control(typo in diagram) can demonstrate the two layers of abstraction. You have an interface for TV and
 an abstract class for remote control. As you know, it is not a good idea to make a concrete class for either of them, because other 
 vendors may make different implementations.
 
 