Object 

methods in object class:
1. equals() , hashCode() , Clone(), toString() ,finalize();

equal() consolidated points:
1. equals method is used to compare the content of two objects. It is a not-static method of java.lang.Object class.
2. == returns true if two reference variable are pointing to same object , equals() returns true if the content of two object is same.

hashCode() consolidated points:
1. It returns an integer representation of memory address of the object. It is a not-static method of java.lang.Object class.

clone() consolidated points:
1. clone() used to create a clone or copy of the given object.Not all the objects in java are clone-able. In order to make an object 
   clone-able, the class of that object must implement Cloneable interface.
2. Cloneable interface is a marker interface. It does not have any methods or fields and used to provide a marker for cloning operation. 

Garbage Collection consolidated points:
1. GC is used to destroy unused object.
2. Whenever you run a java program, JVM creates three threads. 1) main thread   2) Thread Scheduler   3) Garbage Collector Thread. 
   In these three threads, main thread is a user thread and remaining two are daemon threads which run in background.
3. The task of main thread is to execute the main() method. The task of thread scheduler is to schedule the threads. The task of 
   garbage collector thread is to sweep out abandoned objects from the heap memory.  
4. Garbage collector thread calls finalize() method only once for one object.   

finalize() method
1. finalize() method is a protected and non-static method of java.lang.Object class.
2. This method will be available in all objects you create in java.      
3. This method is used to perform some final operations or clean up operations on an object before it is removed from the memory.

/************************************************************************************************************************************/   

equals() method (for equal & hash code refer example 1 in ObjectConsolidatedProgram.java).
1. equals() method is a non-static method of java.lang.Object class. As all classes in java are sub classes of Object class,this method 
   is inherited to every class you create in java.
2. Overriding equals() method : As equals() method is not a final method, you can override it in your class so that you can compare 
   the contents of two objects not just their physical address. i.e you can override equals() method so that it should return true if 
   two objects have same contents.   
3. Difference Between “==” Operator and “equals() method : 
   “==” operator returns true if and only if two references variables are pointing to same object. That means it checks only physical 
    address of the objects not their contents.   
    equals() method also compares physical address of two objects, but you can override and modify it to compare the contents of two 
    objects.

hashCode() method
1. hashCode() method is also a non-static member of java.lang.Object class. It is also, like toString() and equals() methods,inherited 
   to all classes you create in java. It returns an integer representation of memory address of the object.    
2. 

clone() Method (for clone refer example 2 in ObjectConsolidatedProgram.java).
1. clone() method is a non-static protected method of java.lang.Object class. This method is used to create a clone or copy of the 
   given object. It throws CloneNotSupportedException if an object is not clone-able.  
2. Not all the objects in java are clone-able. In order to make an object clone-able, the class of that object must implement Cloneable 
   interface.    
3. Cloneable interface is a marker interface. It does not have any methods or fields in it. It is just used to provide a marker for 
   cloning operation. 
4. If you try to clone an object of the class that does not implement Cloneable interface, you will get CloneNotSupportedException at 
   run time.   
5. Shallow Copy And Deep Copy :If a cloned object and original objects are not 100% disjoint, then it is called shallow copy. In 
   shallow copy operation, any changes made to clone will be reflected in the original or vice-versa. This happens when an object has 
   reference variables as fields. (refer example in ObjectClassExample.java).  
   
Garbage Collection
1. GC is used to destroy unused object.
2. Whenever you run a java program, JVM creates three threads. 1) main thread   2) Thread Scheduler   3) Garbage Collector Thread. 
   In these three threads, main thread is a user thread and remaining two are daemon threads which run in background.
3. The task of main thread is to execute the main() method. The task of thread scheduler is to schedule the threads. The task of 
   garbage collector thread is to sweep out abandoned objects from the heap memory.  
4. Garbage collector thread calls finalize() method only once for one object.    
5. In some scenarios, finalize() method is not at all called by the garbage collector thread.
6. You can make finalize() method to be executed forcefully using either Runtime.getRuntime().runFinalization() OR 
   Runtime.runFinalizersOnExit(true).
7. you can call garbage collector explicitly using System.gc() or RunTime.getRunTime().gc().
8. finalize() methods are not chained like constructors.i.e there is no calling statement to super class finalize() method inside the 
   finalize() method of sub class. You need to explicitly call super class finalize() method.
9. Exceptions occurred in finalize() method are not propagated. They are ignored by the garbage collector.
10.You can call finalize() method explicitly on an object before it is abandoned. When you call, only operations kept in finalize() method 
   are performed on an object. Object will not be destroyed from the memory.    
11.finalize() method on an abandoned object is called only once by the garbage collector thread. GC ignores finalize() method called on 
   an object by the developer.    


4. 
   